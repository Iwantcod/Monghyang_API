---
openapi: 3.1.0
info:
  title: 몽향 API Doc
  description: 몽향 프로젝트 API 문서(개발 중)
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: 양조장 관리자용 API
  description: 양조장 권한을 가진 회원만 접근할 수 있습니다.
paths:
  "/api/user/update":
    post:
      tags:
      - 회원 공통 API
      summary: 회원 수정 api
      description: 비밀번호 변경 시 '기존 비밀번호'와 '새 비밀번호'를 각각의 필드에 입력하여 전송해주셔야 합니다. 수정 성공 시
        해당 유저의 모든 로그인 상태 정보가 서버에서 제거됩니다.
      operationId: updateUsers
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: userRole
        in: query
        required: true
        schema:
          type: string
      - name: reqUsersDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/ReqUsersDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/brewery-priv/update":
    post:
      tags:
      - 양조장 관리자용 API
      summary: 양조장 정보 수정
      operationId: updateImageList
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: reqBreweryDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/ReqBreweryDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/auth/verify-pw":
    post:
      tags:
      - 회원가입 및 인증과 관련된 API
      summary: 기존 비밀번호 검증 API
      description: 정보 수정 등의 동작을 수행하기 전과 같은 상황에서 사용
      operationId: checkPassword
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: verifyAuthDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/VerifyAuthDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/auth/seller-join":
    post:
      tags:
      - 회원가입 및 인증과 관련된 API
      summary: 판매자 회원의 회원가입
      description: 'nickname: 판매자 상호명, name: 판매자 대표자명'
      operationId: sellerJoin
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/SellerJoinDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/auth/refresh":
    post:
      tags:
      - 회원가입 및 인증과 관련된 API
      summary: 세션 및 토큰 갱신
      description: 중복 로그인 감지 시 로그아웃해야 합니다.
      operationId: tokenRefresh
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/auth/common-join":
    post:
      tags:
      - 회원가입 및 인증과 관련된 API
      summary: 일반 회원의 플랫폼 회원가입
      operationId: commonJoin
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/JoinDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/auth/brewery-join":
    post:
      tags:
      - 회원가입 및 인증과 관련된 API
      summary: 양조장 회원의 회원가입
      description: 'nickname: 양조장 상호명, name: 양조장 대표자명'
      operationId: breweryJoin
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/BreweryJoinDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/user/email/{email}":
    get:
      tags:
      - 회원 공통 API
      summary: Email로 회원을 조회합니다.
      operationId: getUsersByEmail
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoResUsersDto"
  "/api/image/{imageFullName}":
    get:
      tags:
      - 이미지 파일 요청 API
      summary: 실제 이미지 파일 요청 API
      description: 이미지 키에 해당되는 uuid를 url 파라메터에 넣어주세요.
      operationId: loadImage
      parameters:
      - name: imageFullName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
  "/api/auth/check-email/{email}":
    get:
      tags:
      - 회원가입 및 인증과 관련된 API
      summary: 이메일 중복체크
      operationId: checkEmail
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/user":
    delete:
      tags:
      - 회원 공통 API
      summary: 회원 탈퇴 API
      operationId: deleteUsers
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: userRole
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
  "/api/brewery-priv":
    delete:
      tags:
      - 양조장 관리자용 API
      summary: 양조장 삭제 처리
      description: 해당 회원의 기존 비밀번호를 입력받고, 일치하는지 검사합니다.
      operationId: breweryQuit
      parameters:
      - name: quitRequestDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/VerifyAuthDto"
      - name: userId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ResponseDataDtoVoid"
components:
  schemas:
    ReqUsersDto:
      type: object
      properties:
        email:
          type: string
        curPassword:
          type: string
        newPassword:
          type: string
        nickname:
          type: string
        name:
          type: string
        phone:
          type: string
        birth:
          type: string
          format: date
        gender:
          type: string
        address:
          type: string
        address_detail:
          type: string
    ResponseDataDtoVoid:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
        content:
          type: object
    AddImageDto:
      type: object
      properties:
        image:
          type: string
          format: binary
        seq:
          type: integer
          format: int32
    ModifySeqImageDto:
      type: object
      properties:
        image_id:
          type: integer
          format: int64
        seq:
          type: integer
          format: int32
    ReqBreweryDto:
      type: object
      properties:
        brewery_name:
          type: string
        brewery_address:
          type: string
        brewery_address_detail:
          type: string
        business_registration_number:
          type: string
        brewery_depositor:
          type: string
        brewery_account_number:
          type: string
        brewery_bank_name:
          type: string
        introduction:
          type: string
        brewery_website:
          type: string
        is_regular_visit:
          type: boolean
        add_images:
          type: array
          items:
            "$ref": "#/components/schemas/AddImageDto"
        modify_images:
          type: array
          items:
            "$ref": "#/components/schemas/ModifySeqImageDto"
        remove_images:
          type: array
          items:
            type: integer
            format: int64
    VerifyAuthDto:
      type: object
      properties:
        password:
          type: string
      required:
      - password
    SellerJoinDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        nickname:
          type: string
        name:
          type: string
        phone:
          type: string
        birth:
          type: string
          format: date
        gender:
          type: string
        address:
          type: string
        address_detail:
          type: string
        is_agreed:
          type: boolean
        business_registration_number:
          type: string
        seller_account_number:
          type: string
        seller_depositor:
          type: string
        seller_bank_name:
          type: string
        introduction:
          type: string
        is_agreed_seller:
          type: boolean
        images:
          type: array
          items:
            "$ref": "#/components/schemas/AddImageDto"
      required:
      - address
      - address_detail
      - birth
      - business_registration_number
      - email
      - gender
      - is_agreed
      - is_agreed_seller
      - name
      - nickname
      - password
      - phone
      - seller_account_number
      - seller_bank_name
      - seller_depositor
    JoinDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        nickname:
          type: string
        name:
          type: string
        phone:
          type: string
        birth:
          type: string
          format: date
        gender:
          type: string
        address:
          type: string
        address_detail:
          type: string
        is_agreed:
          type: boolean
      required:
      - address
      - address_detail
      - birth
      - email
      - gender
      - is_agreed
      - name
      - nickname
      - password
      - phone
    BreweryJoinDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        nickname:
          type: string
        name:
          type: string
        phone:
          type: string
        birth:
          type: string
          format: date
        gender:
          type: string
        address:
          type: string
        address_detail:
          type: string
        is_agreed:
          type: boolean
        business_registration_number:
          type: string
        brewery_depositor:
          type: string
        brewery_account_number:
          type: string
        brewery_bank_name:
          type: string
        introduction:
          type: string
        brewery_website:
          type: string
        images:
          type: array
          items:
            "$ref": "#/components/schemas/AddImageDto"
        region_type_id:
          type: integer
          format: int32
        is_regular_visit:
          type: boolean
        is_agreed_brewery:
          type: boolean
      required:
      - address
      - address_detail
      - birth
      - brewery_account_number
      - brewery_bank_name
      - brewery_depositor
      - business_registration_number
      - email
      - gender
      - is_agreed
      - is_agreed_brewery
      - is_regular_visit
      - name
      - nickname
      - password
      - phone
      - region_type_id
    ResUsersDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        role:
          type: string
        email:
          type: string
        nickname:
          type: string
        name:
          type: string
        phone:
          type: string
        birth:
          type: string
          format: date
        gender:
          type: string
        address:
          type: string
        address_detail:
          type: string
    ResponseDataDtoResUsersDto:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
        content:
          "$ref": "#/components/schemas/ResUsersDto"
  securitySchemes:
    SessionID:
      type: apiKey
      name: X-Session-Id
      in: header
    RefreshToken:
      type: apiKey
      name: X-Refresh-Token
      in: header
